<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Code, lol.</title>
    <link>https://code.lol/categories/typescript/</link>
    <description>Recent content in typescript on Code, lol.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Nov 2021 12:08:01 -0800</lastBuildDate><atom:link href="https://code.lol/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Guard Composition</title>
      <link>https://code.lol/post/programming/type-guard-composition/</link>
      <pubDate>Sun, 14 Nov 2021 12:08:01 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/type-guard-composition/</guid>
      <description>Type guards are a powerful tool for type system design. They are used to express that a type is only valid if it satisfies a certain condition. For example, we can express that a type is only valid if it is a number or a string.
 1. Union Type Guards  1.1. Naive Union Implementation 1.2. 2-adic Union Composition 1.3. N-adic Union Composition  1.3.1. GuardReturnType 1.3.2. Variadic Is-Union 1.</description>
    </item>
    
    <item>
      <title>Unchained Tuple Types</title>
      <link>https://code.lol/post/programming/unchained-tuple-types/</link>
      <pubDate>Sat, 09 Jan 2021 16:33:40 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/unchained-tuple-types/</guid>
      <description>The asserts syntax introduced with TS 3.7 allows us to interleave mutative runtime code with type annotations to express type mutations in a powerful way.
This allows us to do away with the chaining syntax as described in my earlier article, Chained Tuple Types, and express our Set mutations in a much more familiar iterative way:
const set: Set = new Set(); set.insert(2); set.insert(4); set.insert(8); set.remove(4); const hasResult1 = set.has(8); // :: true const hasResult2 = set.</description>
    </item>
    
    <item>
      <title>String Deduplication on the Type Level</title>
      <link>https://code.lol/post/programming/type-level-dedupe/</link>
      <pubDate>Sat, 09 Jan 2021 15:18:24 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/type-level-dedupe/</guid>
      <description>The string deduplication problem is a canonical one within computer science, serving a similar purpose as fizz-buzz in terms of being an example of a simple problem that a reasonably knowledgable practitioner should be able to solve with minimal effort.
The problem appears in a few variants, but briefly one such variant is to remove duplicate letters in a given string, such that the string then has only one instance of any given letter.</description>
    </item>
    
    <item>
      <title>Chained Tuple Types</title>
      <link>https://code.lol/post/programming/chained-tuple-types/</link>
      <pubDate>Tue, 05 Jan 2021 20:23:23 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/chained-tuple-types/</guid>
      <description>With Typescript 4.1, it&amp;rsquo;s now possible to use variadic tuple types to construct large types with what appears to be runtime code. The general idea is that we will utilize a chaining pattern, where each operation on the chain returns an expanded version of the chain&amp;rsquo;s type.
To motivate the example, let us consider a Set class. Our Set is a chaining class, where you may insert, remove, and check for the existence of numbers.</description>
    </item>
    
    <item>
      <title>Enforcing Function Map Constraints</title>
      <link>https://code.lol/post/programming/enforcing-function-map-constraints/</link>
      <pubDate>Wed, 16 Dec 2020 19:41:08 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/enforcing-function-map-constraints/</guid>
      <description>Some &amp;ldquo;easy to state&amp;rdquo; problems in Typescript can require somewhat sophisticated type constructs.
Let&amp;rsquo;s say you want to enforce that every function in a particular map takes in as its first parameter, either a number or a string:
type PermissibleInput = number | string; const myFunctionMap = { foobar(x: number): void; barfoo(y: string): void; } If you do this in the naive way, as e.g. Record&amp;lt;string, (number | string) =&amp;gt; any&amp;gt;, you will discover that this type actually encodes the requirements that every function must support both input types - which is a problem, as myFunctionMap is not actually composed of such functions.</description>
    </item>
    
    <item>
      <title>Self Modifying Type Predicates in Typescript</title>
      <link>https://code.lol/post/programming/self-modifying-type-predicates/</link>
      <pubDate>Sun, 03 May 2020 19:41:57 -0700</pubDate>
      
      <guid>https://code.lol/post/programming/self-modifying-type-predicates/</guid>
      <description>Typescript&amp;rsquo;s type system is uniquely powerful among mainstream programming languages, approximating the expressive power of Haskell or Idris, while also remaining flexible enough for production applications.
Type predicates are a useful tool in building a well-typed software framework. Essentially, they allow you to &amp;ldquo;simulate&amp;rdquo; dependent types, a powerful type feature present in Idris.
Further explanation on type predicates can be found here.
The premise of this article is a usage of type predicates I haven&amp;rsquo;t seen discussed online - most type predicates just modify one of their arguments, but you can actually form a predicate on this because it is an implicit argument.</description>
    </item>
    
    <item>
      <title>Dijkstra&#39;s Shunting Yard in Typescript</title>
      <link>https://code.lol/post/algorithms/shunting-yard/</link>
      <pubDate>Mon, 23 Dec 2019 16:39:53 -0800</pubDate>
      
      <guid>https://code.lol/post/algorithms/shunting-yard/</guid>
      <description>The shunting yard algorithm converts infix expressions (i.e. 1+2) into reverse Polish notation, i.e. 1 2 +, which lends itself well to execution on a stack machine.
An aside: I wanted to revisit this algorithm because it was one of the first I implemented in C during self-study five years ago. In a way, reimplementing it is a way of measuring my progress since then.
The internal details aren&amp;rsquo;t too complicated - it&amp;rsquo;s based on the simple pseudo-code of the Wikipedia article describing the shunting yard algorithm.</description>
    </item>
    
  </channel>
</rss>
