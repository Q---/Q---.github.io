<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functional-programming on Adventures in Typescript</title>
    <link>https://code.lol/tags/functional-programming/</link>
    <description>Recent content in functional-programming on Adventures in Typescript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Dec 2022 22:58:35 -0800</lastBuildDate><atom:link href="https://code.lol/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type-level Collatz Sequence</title>
      <link>https://code.lol/post/programming/type-level-collatz/</link>
      <pubDate>Thu, 08 Dec 2022 22:58:35 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/type-level-collatz/</guid>
      <description>The Collatz conjecture is an unsolved problem in mathematics. It states that for any positive integer n, the sequence of numbers generated by the following algorithm will eventually reach 1. These are also called the hailstone numbers.
function collatz(n: number): number { return n % 2 === 0 ? n / 2 : 3 * n + 1; } The sequence generated by a given $n$ is the sequence of numbers n, collatz(n), collatz(collatz(n)), collatz(collatz(collatz(n))), and so on.</description>
    </item>
    
    <item>
      <title>Typesafe Function Composition</title>
      <link>https://code.lol/post/programming/typesafe-function-composition/</link>
      <pubDate>Sun, 09 Oct 2022 16:45:40 -0700</pubDate>
      
      <guid>https://code.lol/post/programming/typesafe-function-composition/</guid>
      <description>Do ya wanna know how to type function composition in Typescript? Read on!
1. Background 1.1. Type-theoretic Pseudocode 2. Typescript 2.1. IsComposablePair 2.1.1. Type-based Pattern Matching using infer 2.1.2. IsComposablePair 2.2. Every 2.3. Pair 3. Component Synthesis 4. Function Integration 5. Future Work: Constructive Approach 1. Background Function composition is an operation that takes two functions, $f$ and $g$, and produces a new function $h$ such that $h(x) = g(f(x))$.</description>
    </item>
    
  </channel>
</rss>
