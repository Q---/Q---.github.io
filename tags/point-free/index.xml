<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>point-free on Codeless Code</title>
    <link>https://code.lol/tags/point-free/</link>
    <description>Recent content in point-free on Codeless Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2023 23:17:12 -0800</lastBuildDate><atom:link href="https://code.lol/tags/point-free/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kind Reification</title>
      <link>https://code.lol/post/programming/kind-reification/</link>
      <pubDate>Tue, 07 Feb 2023 23:17:12 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/kind-reification/</guid>
      <description>The hkt-toolbelt now provides a way to &amp;lsquo;reify&amp;rsquo; a higher-order type into a concrete function type. This is useful for representation of point-free code.
to reify: make (something abstract) more concrete or real.
Basics of Higher-Order Types For the purposes of hkt-toolbelt, a higher-order type is merely a representation of a type mapping, i.e. an &amp;lsquo;applicable&amp;rsquo; type that maps from an input type to an output type.
Higher-order types are useful because they can take in higher order types, or return higher order types.</description>
    </item>
    
    <item>
      <title>Point-free Programming via HKTs</title>
      <link>https://code.lol/post/programming/hkt-tacit/</link>
      <pubDate>Fri, 11 Mar 2022 09:34:39 -0800</pubDate>
      
      <guid>https://code.lol/post/programming/hkt-tacit/</guid>
      <description>In Typescript, point-free programming has been traditionally limited due to the difficulty the type system has representing the abstracted types associated with point-free (also called &amp;rsquo;tacit&amp;rsquo;) programming.
1. What is Tacit Programming? 2. Type-Level Programming 2.1. The Hard (Naive) Way 2.2. Tacit Logic via HKTs 3. Addendum: Library 3.1. Basic HKT Abstractions 3.2. HKT Composition 3.3. Narrow Type Inference 3.4. Value-level Apply 3.5. Auto-applyable HKTs 3.6. HKT-Level Flow 3.7. HKT-level Split 3.</description>
    </item>
    
  </channel>
</rss>
